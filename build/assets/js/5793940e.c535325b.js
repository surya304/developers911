"use strict";(self.webpackChunkguidelines=self.webpackChunkguidelines||[]).push([[9754],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),i=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=i(e.components);return n.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=i(r),f=a,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||s;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=p;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var i=2;i<s;i++)o[i]=r[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2722:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>i});var n=r(7462),a=(r(7294),r(3905));const s={},o="API Requests",l={unversionedId:"frontend/NextJS/apiRequests",id:"frontend/NextJS/apiRequests",title:"API Requests",description:"Generic GET, POST, PUT & DELETE Requests",source:"@site/docs/frontend/NextJS/apiRequests.md",sourceDirName:"frontend/NextJS",slug:"/frontend/NextJS/apiRequests",permalink:"/docs/frontend/NextJS/apiRequests",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frontend/NextJS/apiRequests.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Reusable Components",permalink:"/docs/frontend/NextJS/components"},next:{title:"Backend",permalink:"/docs/category/backend"}},u={},i=[{value:"Generic GET, POST, PUT &amp; DELETE Requests",id:"generic-get-post-put--delete-requests",level:2},{value:"Calling APIs from Next.js",id:"calling-apis-from-nextjs",level:2},{value:"GET Request",id:"get-request",level:3},{value:"POST Request with FormData",id:"post-request-with-formdata",level:3},{value:"POST Request with JSON object",id:"post-request-with-json-object",level:3},{value:"PUT Request with FormData",id:"put-request-with-formdata",level:3},{value:"PUT Request with JSON object",id:"put-request-with-json-object",level:3},{value:"DELETE Request",id:"delete-request",level:3}],c={toc:i};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"api-requests"},"API Requests"),(0,a.kt)("h2",{id:"generic-get-post-put--delete-requests"},"Generic GET, POST, PUT & DELETE Requests"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="serverRequests.js"',title:'"serverRequests.js"'},'\nasync function serverRequest(serverdata) {\n\u200b\n     // var data = {\n    //     request_method: "GET", // POST // PUT // GET\n    //     request_url: "/api/profile",\n    //     request_header: "form"// form , jsondata\n    //     body_data:{}// form , jsondata\n    // }\n\u200b\n    const { request_method, request_url, request_header, body_data } = serverdata;\n\u200b\n    let final_request_object = { method: request_method };\n    if (request_method !== \'GET\') {\n        if (request_header === \'form\') {\n            final_request_object.body = body_data;\n        } else {\n            final_request_object.headers = { "Content-Type": "application/json" };\n            final_request_object.body = body_data;\n        }\n    }\n\u200b\n    try {\n        const res = await fetch(request_url, final_request_object);\n        const data = await res.json();\n\u200b\n        let finalreturnObj = { error: true , errorMessage: [], status:200 , data: undefined };\n        if (data.errors) {\n            finalreturnObj.error = true;\n            finalreturnObj.errorMessage = data.errors;\n            finalreturnObj.status = data.status;\n        } else{\n            finalreturnObj = { error: false, data:data };\n        }\n\u200b\n        return finalreturnObj;\n    } catch (error) {\n         finalreturnObj.error = true;\n         finalreturnObj.errorMessage = error;\n         finalreturnObj.status = 500 \n        return finalreturnObj\n    }\n}\n\u200b\n\u200b\n\u200b\nfunction statusMessage(response){\n\u200b\n\u200b\n    switch (response.status) {\n        case 200:\n          // OK - The request was successful\n          return "The request was successful";\n\u200b\n        case 400:\n          // Bad Request - The request was malformed or invalid\n          return "The request was malformed or invalid";\n        case 401:\n          // Unauthorized - The request requires authentication\n          return response.json().then(err => Promise.reject(err));\n        case 403:\n          // Forbidden - The request is not authorized for the current user\n          return response.json().then(err => Promise.reject(err));\n        case 404:\n          // Not Found - The requested resource could not be found\n          return response.json().then(err => Promise.reject(err));\n      \n        case 500:\n          // Internal Server Error - An unexpected error occurred on the server\n          return response.json().then(err => Promise.reject(err));\n \n        case 503:\n          // Service Unavailable - The server is currently unable to handle the request\n          return response.json().then(err => Promise.reject(err));\n        default:\n          // Unexpected status code\n          return response.json().then(err => Promise.reject(err));\n\u200b\n    }\n}\nmodule.exports = { serverRequest,statusMessage };\n\n')),(0,a.kt)("h2",{id:"calling-apis-from-nextjs"},"Calling APIs from Next.js"),(0,a.kt)("h3",{id:"get-request"},"GET Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="sample.jsx"',title:'"sample.jsx"'},'\nlet finalData = {\n        request_method: "GET", \n        request_url: "/api/multiupload",\n    }\n        \n  var finalObj= await serverRequest(finalData);\n \n  setLoader(false); // Show Loader \n  \n    if (finalObj.error == true) { // Error \n      console.log("Error>>>", finalObj.errorMessage)\n    }else{  // Success  \n      console.log("Success>>>", finalObj)\n    }\n')),(0,a.kt)("h3",{id:"post-request-with-formdata"},"POST Request with FormData"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="sample.jsx"',title:'"sample.jsx"'},'\nlet formData = new FormData()\nformData.append("input1", input1Value); // Add Key Value pairs\n\nlet finalData = {\n        request_method: "POST", \n        request_url: "/api/multiupload",\n        request_header: "form",\n        body: formData \n    }\n        \n  var finalObj= await serverRequest(finalData);\n \n  setLoader(false); // Show Loader \n  \n    if (finalObj.error == true) { // Error \n      console.log("Error>>>", finalObj.errorMessage)\n    }else{  // Success  \n      console.log("Success>>>", finalObj)\n    }\n')),(0,a.kt)("h3",{id:"post-request-with-json-object"},"POST Request with JSON object"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="sample.jsx"',title:'"sample.jsx"'},'\nlet formData = {\n    "name": input1Value,\n    "email": input2Value \n}\n\nlet finalData = {\n        request_method: "POST", \n        request_url: "/api/multiupload",\n        request_header: "jsondata",\n        body: JSON.stringify(formData) \n    }\n        \n  var finalObj= await serverRequest(finalData);\n \n  setLoader(false); // Show Loader \n  \n    if (finalObj.error == true) { // Error \n      console.log("Error>>>", finalObj.errorMessage)\n    }else{  // Success  \n      console.log("Success>>>", finalObj)\n    }\n')),(0,a.kt)("h3",{id:"put-request-with-formdata"},"PUT Request with FormData"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="sample.jsx"',title:'"sample.jsx"'},'\nlet formData = new FormData()\nformData.append("input1", input1Value); // Add Key Value pairs\n\nlet finalData = {\n        request_method: "PUT", \n        request_url: "/api/multiupload",\n        request_header: "form",\n        body: formData \n    }\n        \n  var finalObj= await serverRequest(finalData);\n \n  setLoader(false); // Show Loader \n  \n    if (finalObj.error == true) { // Error \n      console.log("Error>>>", finalObj.errorMessage)\n    }else{  // Success  \n      console.log("Success>>>", finalObj)\n    }\n')),(0,a.kt)("h3",{id:"put-request-with-json-object"},"PUT Request with JSON object"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="sample.jsx"',title:'"sample.jsx"'},'\nlet formData = {\n    "name": input1Value,\n    "email": input2Value \n}\n\nlet finalData = {\n        request_method: "PUT", \n        request_url: "/api/multiupload",\n        request_header: "jsondata",\n        body: JSON.stringify(formData) \n    }\n        \n  var finalObj= await serverRequest(finalData);\n \n  setLoader(false); // Show Loader \n  \n    if (finalObj.error == true) { // Error \n      console.log("Error>>>", finalObj.errorMessage)\n    }else{  // Success  \n      console.log("Success>>>", finalObj)\n    }\n')),(0,a.kt)("h3",{id:"delete-request"},"DELETE Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="sample.jsx"',title:'"sample.jsx"'},'\nlet formData = {\n    "id": input1Value,\n    "key": input2Value \n}\n\nlet finalData = {\n        request_method: "DELETE", \n        request_url: "/api/multiupload",\n        request_header: "jsondata",\n        body: JSON.stringify(formData) \n    }\n        \n  var finalObj= await serverRequest(finalData);\n \n  setLoader(false); // Show Loader \n  \n    if (finalObj.error == true) { // Error \n      console.log("Error>>>", finalObj.errorMessage)\n    }else{  // Success  \n      console.log("Success>>>", finalObj)\n    }\n')))}d.isMDXComponent=!0}}]);