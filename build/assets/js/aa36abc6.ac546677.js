"use strict";(self.webpackChunkguidelines=self.webpackChunkguidelines||[]).push([[3500],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),d=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(t),f=a,m=p["".concat(i,".").concat(f)]||p[f]||c[f]||s;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=p;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<s;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2837:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const s={sidebar_position:3},o="CRUD Operations",l={unversionedId:"backend/NextJS/crud",id:"backend/NextJS/crud",title:"CRUD Operations",description:"CRUD Guide",source:"@site/docs/backend/NextJS/crud.md",sourceDirName:"backend/NextJS",slug:"/backend/NextJS/crud",permalink:"/docs/backend/NextJS/crud",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/backend/NextJS/crud.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Validations",permalink:"/docs/backend/NextJS/validation"},next:{title:"Deployment",permalink:"/docs/category/deployment"}},i={},d=[{value:"CRUD Guide",id:"crud-guide",level:2},{value:"genericActions.js File",id:"genericactionsjs-file",level:3},{value:"GET Request",id:"get-request",level:3},{value:"POST Request",id:"post-request",level:3},{value:"PUT Request",id:"put-request",level:3},{value:"DELETE Request",id:"delete-request",level:3}],u={toc:d};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"crud-operations"},"CRUD Operations"),(0,a.kt)("h2",{id:"crud-guide"},"CRUD Guide"),(0,a.kt)("p",null,"Always validate and sanitize the variables before performing Database operations.\nEspecially, if you are performing ",(0,a.kt)("strong",{parentName:"p"},"write")," requests. "),(0,a.kt)("p",null,"Will create a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"genericActions.js")," file inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"lib")," folder. This file has some standard functions which will be used in CRUD operations."),(0,a.kt)("p",null,"This has been written specifically for ",(0,a.kt)("strong",{parentName:"p"},"MongoDB")," only."),(0,a.kt)("h3",{id:"genericactionsjs-file"},"genericActions.js File"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="lib/genericActions.js"',title:'"lib/genericActions.js"'},'// All the Generic Functions which will be used through out the app will go here\n\nimport * as moment from "moment";\n\n\nimport User from "../../models/user";\nimport Category from "../../models/category";\nimport SubCategory from "../../models/sub_category";\n\n// Function to Pick which Object the operations should be performed \nfunction getObject(name) {\n  switch (name) {\n    case "User":\n      return User;\n\n    case "Category":\n      return Category;\n\n    case "SubCategory":\n      return SubCategory;\n  }\n}\n\n// GET Request \nconst fetchRecords = (data) => {\n  let url = data.url;\n\n  let query = undefined;\n\n  if (data.type == "find") {\n    query = getObject(data.modal).find(data.condition);\n\n    if (data.limit) {\n      query.limit(data.limit);\n    }\n\n    if (data.skip) {\n      query.skip(data.skip);\n    }\n  } else if (data.type == "findById") {\n    query = getObject(data.modal).findById(data.id);\n  } else if (data.type == "findOne") {\n    query = getObject(data.modal).findOne(data.condition);\n  }\n\n  if (data.selectFields) {\n    query.select(data.selectFields);\n  }\n  else\n  {\n    reject("selectFields is Missing");\n  }\n\n  if (data.populate) { \n    for (let i = 0; i < data.populate.length; i++) {\n      let obj = data.populate[i].select;\n      let key = getKeyByValue(obj, 1);\n\n      if (key == "all") {\n        // Populate all fields\n        if (data.populate[i].hasOwnProperty("match")) {\n          let newObj = {\n            match: data.populate[i].match,\n            path: data.populate[i].path,\n          };\n          query.populate(newObj);\n        } else {\n          query.populate(data.populate[i].path);\n        }\n      } else {\n        query.populate(data.populate[i]);\n      }\n    }\n  }\n\n  if (data.orderBy) {\n    if (data.orderByKey) {\n      let order = -1;\n      if (data.orderBy == "asc") {\n        order = 1;\n      }\n\n      if (data.orderByKey == "name") {\n        query.sort({ name: order });\n      }\n      if (data.orderByKey == "created_at") {\n        query.sort({ created_at: order });\n      }\n      if (data.orderByKey == "email") {\n        query.sort({ email: order });\n      }\n    } else {\n      if (query.orderBy == "desc") {\n        query.sort({ created_at: 1 });\n      } else {\n        query.sort({ created_at: -1 });\n      }\n    }\n  }\n\n  return new Promise(function (resolve, reject) {\n    query.exec(function (err, result) {\n      if (err) {\n        errorLog(url, err);\n        reject(err);\n      } else {\n        if (result) {\n          resolve(result);\n        } else {\n          resolve([]);\n        }\n      }\n    });\n  });\n};\n\n\n// PUT Request \nconst updateRecord = (data) => {\n  let url = data.url;\n  let updateFields = data.updateFields;\n\n  let query = undefined;\n\n  if (data.type == "findOne") {\n    query = getObject(data.modal).findOne(data.condition);\n  } else {\n    query = getObject(data.modal).findById(data.id);\n  }\n\n\n  if (data.selectFields) {    \n    query.select(data.selectFields);\n  }\n  else\n  {\n    reject("selectFields is Missing");\n  }\n\n  return new Promise(function (resolve, reject) {\n    query.exec(function (err, result) {\n      if (err) {\n        errorLog(url, err);\n        reject(err);\n      } else {\n        if (result) {\n          for (let i = 0; i < updateFields.length; i++) {\n            result[updateFields[i].key] = updateFields[i].value;\n          }\n\n          result.save(function (err1, updatedResult) {\n            if (err1) {\n              errorLog(url, err1);\n              reject(err1);\n            } else {\n              resolve(updatedResult);\n            }\n          });\n        } else {\n          resolve("empty");\n        }\n      }\n    });\n  });\n};\n\n\n// DELETE Request \nconst deleteRecord = (data) => {\n  let url = data.url;\n  let query = getObject(data.modal).findById(data.id);\n\n  return new Promise(function (resolve, reject) {\n    query.exec(function (err, result) {\n      if (err) {\n        errorLog(url, err);\n        reject(err);\n      } else {\n        result.is_del = true;\n\n        result.save(function (err1) {\n          if (err1) {\n            errorLog(url, err1);\n            reject(err1);\n          } else {\n            resolve("deleted");\n          }\n        });\n      }\n    });\n  });\n};\n\n// DELETE Request \nconst deleteRecordPermanently = (data) => {\n  let url = data.url;\n  let query = getObject(data.modal).findById(data.id);\n\n  return new Promise(function (resolve, reject) {\n    query.exec(function (err, result) {\n      if (err) {\n        errorLog(url, err);\n        reject(err);\n      } else {\n        result.remove(function (err1) {\n          if (err1) {\n            errorLog(url, err1);\n            reject(err1);\n          } else {\n            resolve("deleted");\n          }\n        });\n      }\n    });\n  });\n};\n\n\n// GET Request \nconst getRecordsCount = (data) => {\n  let url = data.url;\n\n  let p = getObject(data.modal).find(data.condition);\n\n  return new Promise(function (resolve, reject) {\n    p.countDocuments(function (err, count) {\n      if (err) {\n        errorLog(url, err);\n        reject(err);\n      } else {\n        resolve(count);\n      }\n    });\n  });\n};\n\n\nfunction hasJsonStructure(str) {\n  if (typeof str !== "string") return false;\n  try {\n    const result = JSON.parse(str);\n    const type = Object.prototype.toString.call(result);\n    return type === "[object Object]" || type === "[object Array]";\n  } catch (err) {\n    return false;\n  }\n}\n\nconst errorLog = (url, errorObj) => {\n  if (\n    process.env.NODE_ENV == "production" ||\n    process.env.NODE_ENV == "staging"\n  ) {\n    let nowDate = new Date();\n    let errorText = "";\n    if (errorObj) {\n      if (hasJsonStructure(errorObj)) {\n        errorText = JSON.stringify(errorObj);\n      } else {\n        errorText = errorObj;\n      }\n    }\n    let errorFile =\n      "Time - " +\n      moment().format("DD-MMM-YYYY h:mm:ss a") +\n      "\\n" +\n      "URL - " +\n      url +\n      "\\n" +\n      "Error - " +\n      errorText +\n      "\\n\\n";\n\n    let fileName = moment(nowDate).format("DD-MMM-YYYY") + "-logs.txt";\n\n    // Add Code to Send Error to CloudWatch\n  } else {\n    console.log("Error in URL>>>>>", url);\n    console.log("Error Details>>>>>", errorObj);\n  }\n};\n\n\nfunction getKeyByValue(object, value) {\n  return Object.keys(object).find((key) => object[key] === value);\n}\n\n\nmodule.exports = {\n  errorLog,\n  fetchRecords,\n  deleteRecord,\n  updateRecord,\n  getRecordsCount,\n  deleteRecordPermanently,\n};\n')),(0,a.kt)("h3",{id:"get-request"},"GET Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="GET request"',title:'"GET','request"':!0},' case "GET":\n  try {\n    \n    let url = req.url \n    let params = req.query // or req.params \n\n    // Validate the parameters \n\n    // Fetch Single Record\n\n     let getObj = {\n      "modal": "User", // This should be defined in genericActions.js file getObject function \n      "url": url, // will use this for logging \n      "type": "findOne", \n      "selectFields": ["name", "email"], // specify the fields for retreiving \n      "condition": { "name": "Anirudh" }, // this will vary based on your logic\n      "populate": [ // Incase you want to populate inner objects \n        { path: "country_id", select: { name: 1 } },\n        { path: "city_id", select: { name: 1 } },\n      ],\n    };\n\n    let userInfo = await fetchRecords(getObj); \n\n    // Fetch Single Record based on Mongo ObjectID\n     \n    let getObj = {\n      "modal": "User", \n      "url": url, \n      "type": "findById", \n      "id": "mongoobjectid",\n      "selectFields": ["name", "email"]\n    };\n\n    let userInfo = await fetchRecords(getObj); \n    \n    // Fetch Multiple Records \n\n    let getObj = {\n      "modal": "User", \n      "url": url, \n      "type": "find", \n      "condition": {"is_del": false},\n      "selectFields": ["name", "email"]\n    };\n\n    let userInfo = await fetchRecords(getObj); \n\n\n    // Fetch only count instead of records \n\n    let getObj = {\n      "modal": "User", \n      "url": url, \n      "condition": {"is_del": false}\n    };\n\n    let usersCount = await getRecordsCount(getObj); \n\n    res.status(200).json({ success: true, data: userInfo });\n\n  } catch (error) {\n    // add error handling \n    res.status(500).json({ success: false });\n  }\n  break;\n')),(0,a.kt)("h3",{id:"post-request"},"POST Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="POST request"',title:'"POST','request"':!0},' case "POST":\n  try {\n    \n    let params = req.body // or req.query or req.params \n\n    // Validate the parameters \n\n    let userObj = new User({\n      "name": req.body.name,\n      "email": req.body.email,\n      "password": hash,\n      "created_at": new Date(),\n      "updated_at": new Date(),\n    });\n\n    \n    userObj.save(async function (err, result) {\n      if (err) {\n        res.status(500).json({ success: false });\n      } else {\n        res.status(200).json({ success: true, data: result });\n      }\n    });\n\n\n  } catch (error) {\n    // add error handling \n    res.status(500).json({ success: false });\n  }\n  break;\n')),(0,a.kt)("h3",{id:"put-request"},"PUT Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="PUT request"',title:'"PUT','request"':!0},' case "PUT":\n  try {\n    \n      let params = req.body // or req.params or req.query \n\n      // Validate the parameters \n\n      // Update Based on Mongo ObjectID\n\n      let updateFields = [ \n  \n          { "key": "name", "value": "Johnny Bravo" },\n          { "key": "company", "value": "Awesome Inc" },\n          { "key": "updated_at", "value": new Date() },\n      ]\n  \n      let updateObj = {\n          "modal": "User",\n          "url": url,\n          "id": "mongoobjectid",\n          "type": "findById",\n          "updateFields": updateFields,\n          "selectFields": ["name", "email"]\n      }\n    \n      await generic.updateRecord(updateObj)\n    \n    \n      // Update Based on Condition\n\n      let updateFields = [ \n  \n          { "key": "name", "value": "Johnny Bravo" },\n          { "key": "company", "value": "Awesome Inc" },\n          { "key": "updated_at", "value": new Date() },\n      ]\n  \n      let updateObj = {\n          "modal": "User",\n          "url": url,\n          "type": "findOne",\n          "updateFields": updateFields,\n          "condition": { "email": "johnny@awesome.com" },\n          "selectFields": ["name", "email"]\n      }\n    \n      let userInfo = await generic.updateRecord(updateObj)\n\n      res.status(200).json({ success: true, data: userInfo });\n\n\n  } catch (error) {\n    // add error handling \n    res.status(500).json({ success: false });\n  }\n  break;\n')),(0,a.kt)("h3",{id:"delete-request"},"DELETE Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="DELETE request"',title:'"DELETE','request"':!0},' case "DELETE":\n  try {\n    \n    let params = req.body // or req.query or req.params \n\n    // Validate the parameters \n\n    // Always check whether the user deleting the record has access to the record  \n    \n    let delObj = {\n        "modal": "User",\n        "url": url,\n        "type": "findById",\n        "id": userID \n    }\n\n    await generic.deleteRecord(delObj) // updating is_del=true in database  \n\n    // incase you want to delete the record from database completely  \n    await generic.deleteRecordPermanently(delObj) \n\n    res.status(200).json({ success: true });\n\n  } catch (error) {\n    // add error handling \n    res.status(500).json({ success: false });\n  }\n  break;\n')))}c.isMDXComponent=!0}}]);